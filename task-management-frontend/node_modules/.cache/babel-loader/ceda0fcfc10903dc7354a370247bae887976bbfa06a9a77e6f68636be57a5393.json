{"ast":null,"code":"import axios from 'axios';\nconst baseURL = 'http://localhost:9900';\nconst api = axios.create({\n  baseURL\n});\nexport const registerUser = async userData => {\n  try {\n    const response = await api.post('/users/signup', userData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const loginUser = async userData => {\n  try {\n    const response = await api.post('/users/login', userData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const logOutUser = async () => {\n  try {\n    const token = localStorage.getItem(\"token\");\n    const response = await api.post('/users/logout', {}, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const fetchUserProfile = async () => {\n  try {\n    const token = localStorage.getItem(\"token\");\n    const response = await api.get('/users/user', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const updateProfileInfo = async profileData => {\n  try {\n    const token = localStorage.getItem(\"token\");\n    const response = await api.put('/users/update', profileData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const fetchUserTasks = async () => {\n  try {\n    const token = localStorage.getItem(\"token\");\n    const response = await api.get('/tasks/gettask', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data.tasks;\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","baseURL","api","create","registerUser","userData","response","post","data","error","loginUser","logOutUser","token","localStorage","getItem","headers","Authorization","fetchUserProfile","get","updateProfileInfo","profileData","put","fetchUserTasks","tasks"],"sources":["C:/react company/To-do-list/task-management-frontend/src/Services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst baseURL = 'http://localhost:9900';\r\n\r\nconst api = axios.create({\r\n  baseURL,\r\n});\r\n\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await api.post('/users/signup', userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const loginUser = async (userData) => {\r\n  try {\r\n    const response = await api.post('/users/login', userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const logOutUser = async () => {\r\n  try {\r\n    const token = localStorage.getItem(\"token\");\r\n    const response = await api.post('/users/logout', {}, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchUserProfile = async () => {\r\n  try {\r\n    const token = localStorage.getItem(\"token\");\r\n    const response = await api.get('/users/user', {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateProfileInfo = async (profileData) => {\r\n  try {\r\n    const token = localStorage.getItem(\"token\");\r\n    const response = await api.put('/users/update', profileData , {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchUserTasks = async () => {\r\n  try {\r\n    const token = localStorage.getItem(\"token\");\r\n    const response = await api.get('/tasks/gettask', {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    return response.data.tasks;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB;AAEvC,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMG,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,eAAe,EAAEF,QAAQ,CAAC;IAC1D,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAOL,QAAQ,IAAK;EAC3C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,cAAc,EAAEF,QAAQ,CAAC;IACzD,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMR,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,EAAE;MACnDQ,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUJ,KAAK;MAChC;IACF,CAAC,CAAC;IACF,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMQ,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACF,MAAML,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMR,QAAQ,GAAG,MAAMJ,GAAG,CAACgB,GAAG,CAAC,aAAa,EAAE;MAC5CH,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUJ,KAAK;MAChC;IACF,CAAC,CAAC;IACF,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMU,iBAAiB,GAAG,MAAOC,WAAW,IAAK;EACtD,IAAI;IACF,MAAMR,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMR,QAAQ,GAAG,MAAMJ,GAAG,CAACmB,GAAG,CAAC,eAAe,EAAED,WAAW,EAAG;MAC5DL,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUJ,KAAK;MAChC;IACF,CAAC,CAAC;IACF,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMa,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMV,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMR,QAAQ,GAAG,MAAMJ,GAAG,CAACgB,GAAG,CAAC,gBAAgB,EAAE;MAC/CH,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUJ,KAAK;MAChC;IACF,CAAC,CAAC;IACF,OAAON,QAAQ,CAACE,IAAI,CAACe,KAAK;EAC5B,CAAC,CAAC,OAAOd,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}