{"ast":null,"code":"var _jsxFileName = \"C:\\\\react company\\\\To-do-list\\\\task-management-frontend\\\\src\\\\Components\\\\taskList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Typography, List, ListItem, ListItemText, ListItemSecondaryAction, IconButton, Chip } from \"@mui/material\";\nimport { fetchUserTasks } from \"../Services/api\"; // Adjust this import based on your API service function\nimport TaskDetailsDialog from \"./taskDetails\"; // Import the TaskDetailsDialog component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [selectedTask, setSelectedTask] = useState(null); // State to hold the selected task details\n\n  useEffect(() => {\n    const fetchTaskList = async () => {\n      try {\n        const data = await fetchUserTasks();\n        setTasks(data);\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    };\n    fetchTaskList();\n  }, []);\n  const handleOpenDialog = task => {\n    setSelectedTask(task);\n    setOpenDialog(true);\n  };\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n  const getPriorityColor = priority => {\n    switch (priority) {\n      case 'High':\n        return 'red';\n      case 'Medium':\n        return 'orange';\n      case 'Low':\n        return 'green';\n      default:\n        return 'grey';\n    }\n  };\n  const getStatusColor = status => {\n    switch (status) {\n      case 'Completed':\n        return 'green';\n      case 'In Progress':\n        return 'blue';\n      case 'Pending':\n        return 'grey';\n      default:\n        return 'grey';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(List, {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(ListItem, {\n        button: true,\n        onClick: () => handleOpenDialog(task) // Open dialog when a task is clicked\n        ,\n        component: Link,\n        style: {\n          textDecoration: \"none\",\n          color: \"inherit\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: task.Title,\n          secondary: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              component: \"span\",\n              variant: \"body2\",\n              style: {\n                color: getStatusColor(task.Status)\n              },\n              children: [\"Status: \", task.Status]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"span\",\n              variant: \"body2\",\n              style: {\n                color: getPriorityColor(task.Priority)\n              },\n              children: [\"Priority: \", task.Priority]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 19\n            }, this), \"Created At: \", new Date(task.createdAt).toLocaleString()]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            edge: \"end\",\n            \"aria-label\": \"view-task-details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, task._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), selectedTask && /*#__PURE__*/_jsxDEV(TaskDetailsDialog, {\n      taskDetails: selectedTask,\n      open: openDialog,\n      onClose: handleCloseDialog,\n      onModify: () => {\n        // Handle modify task action\n        // For example, navigate to modify task page\n        console.log(\"Modify task clicked\");\n        setOpenDialog(false); // Close dialog after modify action\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"79XRgWiLlYAR8HCSKRkavzVeivA=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useEffect","useState","Link","Typography","List","ListItem","ListItemText","ListItemSecondaryAction","IconButton","Chip","fetchUserTasks","TaskDetailsDialog","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskList","_s","tasks","setTasks","openDialog","setOpenDialog","selectedTask","setSelectedTask","fetchTaskList","data","error","console","handleOpenDialog","task","handleCloseDialog","getPriorityColor","priority","getStatusColor","status","children","map","button","onClick","component","style","textDecoration","color","primary","Title","secondary","variant","Status","fileName","_jsxFileName","lineNumber","columnNumber","Priority","Date","createdAt","toLocaleString","edge","_id","taskDetails","open","onClose","onModify","log","_c","$RefreshReg$"],"sources":["C:/react company/To-do-list/task-management-frontend/src/Components/taskList.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Typography,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  IconButton,\r\n  Chip,\r\n} from \"@mui/material\";\r\nimport { fetchUserTasks } from \"../Services/api\"; // Adjust this import based on your API service function\r\nimport TaskDetailsDialog from \"./taskDetails\"; // Import the TaskDetailsDialog component\r\n\r\nconst TaskList = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [selectedTask, setSelectedTask] = useState(null); // State to hold the selected task details\r\n\r\n  useEffect(() => {\r\n    const fetchTaskList = async () => {\r\n      try {\r\n        const data = await fetchUserTasks();\r\n        setTasks(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching tasks:\", error);\r\n      }\r\n    };\r\n\r\n    fetchTaskList();\r\n  }, []);\r\n\r\n  const handleOpenDialog = (task) => {\r\n    setSelectedTask(task);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const getPriorityColor = (priority) => {\r\n    switch (priority) {\r\n      case 'High':\r\n        return 'red';\r\n      case 'Medium':\r\n        return 'orange';\r\n      case 'Low':\r\n        return 'green';\r\n      default:\r\n        return 'grey';\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case 'Completed':\r\n        return 'green';\r\n      case 'In Progress':\r\n        return 'blue';\r\n      case 'Pending':\r\n        return 'grey';\r\n      default:\r\n        return 'grey';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <List>\r\n        {tasks.map((task) => (\r\n          <ListItem\r\n            key={task._id}\r\n            button\r\n            onClick={() => handleOpenDialog(task)} // Open dialog when a task is clicked\r\n            component={Link}\r\n            style={{ textDecoration: \"none\", color: \"inherit\" }}\r\n          >\r\n            <ListItemText\r\n              primary={task.Title}\r\n              secondary={\r\n                <>\r\n                  <Typography\r\n                    component=\"span\"\r\n                    variant=\"body2\"\r\n                    style={{ color: getStatusColor(task.Status) }}\r\n                  >\r\n                    Status: {task.Status}\r\n                  </Typography>\r\n                  <br />\r\n                  <Typography\r\n                    component=\"span\"\r\n                    variant=\"body2\"\r\n                    style={{ color: getPriorityColor(task.Priority) }}\r\n                  >\r\n                    Priority: {task.Priority}\r\n                  </Typography>\r\n                  <br />\r\n                  Created At: {new Date(task.createdAt).toLocaleString()}\r\n                </>\r\n              }\r\n            />\r\n            {/* Add an icon button or any action you want to perform */}\r\n            <ListItemSecondaryAction>\r\n              <IconButton edge=\"end\" aria-label=\"view-task-details\">\r\n                {/* Add an icon here if needed */}\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n\r\n      {/* Task Details Dialog */}\r\n      {selectedTask && (\r\n        <TaskDetailsDialog\r\n          taskDetails={selectedTask}\r\n          open={openDialog}\r\n          onClose={handleCloseDialog}\r\n          onModify={() => {\r\n            // Handle modify task action\r\n            // For example, navigate to modify task page\r\n            console.log(\"Modify task clicked\");\r\n            setOpenDialog(false); // Close dialog after modify action\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}